@page "/UpdatePayment/{Username}/{Password}/{TransactionId:int}"

@code {
    [Parameter]
    public string Username { get; set; }

    [Parameter]
    public string Password { get; set; }
    [Parameter]
    public int TransactionId { get; set; }


    public int Userid { get; set; } 

    public PaymentTransactionDto TransactionDto { get; set; }

    [Inject]
    public IPaymentServices PaymentServices { get; set; }

    [Inject]
    public IUserServices userServices { get; set; }

    [Inject]
    public IJSRuntime JS { get; set; }

    [Inject]
    public NavigationManager navigationManager { get; set; }

    public double TransactionAmount { get; set; }

    public DateTime TransactionTime { get; set; }

    public string? TransactionDescription { get; set; } 


    public string? MainPageUrl { get; set; }

    public string? ErrorMessage { get; set; }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            var Finduser = await userServices.Login(Username, Password);
            Userid = Convert.ToInt32(Finduser.Id);

            if (Finduser != null)
            {
                TransactionDto = await PaymentServices.GetTransaction(Userid, TransactionId);

                TransactionAmount = TransactionDto.Amount;
                TransactionDescription = TransactionDto.Descriptions;
                TransactionTime = TransactionDto.TransactionTime;
            }

            else
            {
                ErrorMessage = "Your Account Not Found !";
            }
        }

        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    protected async Task UpdatePayment_Click()
    {
        TransactionDto.Id = TransactionId;
        TransactionDto.Amount = TransactionAmount;
        TransactionDto.TransactionTime = TransactionTime;
        TransactionDto.Descriptions = TransactionDescription;


        var UpdateTransaction = await PaymentServices.UpdateTransaction(Userid, TransactionDto);
        StateHasChanged();

        if(UpdateTransaction != null)
        {
            await JS.InvokeVoidAsync("alert","Your Transaction Update Record SuccessFuly !");
            navigationManager.NavigateTo($"/UserMainPage/{Username}/{Password}");
        }
        else
        {
            await JS.InvokeVoidAsync("alert","Somthing went wrong while Update Your Transaction !");
        }

    }
}


@if (TransactionDto == null && ErrorMessage == null)
{
    <DisplaySpinner />
}

else if (ErrorMessage != null)
{
    <DisplayEror ErorMessage="@ErrorMessage"></DisplayEror>
}

else
{
    <div class="body">
        <div class="update-pay-box">
            <h2 class="text-white mb-2">
                Update Payment Transaction
            </h2>

            <label class="transaction-lbl">
                Transaction Amount :
            </label>

            <input class="payment-input" type="number" @bind="@TransactionAmount" />

            <br />

            <label class="transaction-lbl">
                Transaction Time :
            </label>

            <input class="payment-input" type="datetime" @bind="@TransactionTime" />

            <br />

            <label class="transaction-lbl">
                Transaction Description :
            </label>

            <input class="payment-input" type="text" @bind="@TransactionDescription" />

            <br />
            <br />

            <a class="btn btn-submit" @onclick="() => UpdatePayment_Click()" href="@MainPageUrl">
                Click For Update Payment Transaction !
            </a>

        </div>
    </div>
}